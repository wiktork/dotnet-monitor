using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MySuperAwesomeEventPipeProvider;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class MySuperAwesomeEventPipeProviderTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "MySuperAwesomeEventPipeProvider";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xaff081fe), unchecked((short) 0x0247), unchecked((short) 0x4275), 0x9c, 0x4e, 0x02, 0x1f, 0x3d, 0xc1, 0xda, 0x35);
        public enum Keywords : long
        {
        };

        public MySuperAwesomeEventPipeProviderTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<ThreadStart> DotnetMonitorStacksStart
        {
            add
            {
                source.RegisterEventTemplate(DotnetMonitorStacksStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private ThreadStart DotnetMonitorStacksStartTemplate(Action<ThreadStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadStart(action, 1, 1, "DotnetMonitorStacks", Guid.Empty, 12, "Start", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[1];
                templates[0] = DotnetMonitorStacksStartTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MySuperAwesomeEventPipeProvider
{
    public sealed class ThreadStart : TraceEvent
    {
        public long ThreadId { get { return GetInt64At(0); } }
        public int OffsetsSize { get { return GetInt32At(8); } }
        public long Offsets(int arrayIndex) { return GetInt64At(12 + (arrayIndex * HostOffset(8, 0))); }

        #region Private
        internal ThreadStart(Action<ThreadStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 0+ (OffsetsSize*8)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < 0+ (OffsetsSize*8)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ThreadStart>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ThreadId", ThreadId);
             XmlAttrib(sb, "OffsetsSize", OffsetsSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ThreadId", "OffsetsSize", "Offsets"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ThreadId;
                case 1:
                    return OffsetsSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadStart> m_target;
        #endregion
    }
}
